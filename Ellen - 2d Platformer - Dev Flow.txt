
1. Created Player.
2. Created Animation setup
	a. Window --> Animation (this created Animation window/panel)
	b. Clicked on "create" button, and gave the path as "Assets-->Animations-->Player". This created a Animation controller in Project folders.
	c. Add a component (Animation) in Player object in Hierarchy.
	d. Assigned the Animation Controller created in "b" to the 'animator' parameter in the "Animator" component of player.
	e. Clicked on Player in Hierarchy, and created animations clips using sprites, at path same as where Controller is there.
	f. Created transitions between animations from Animator window (by double clicking controller in project window).
	g. Created a PlayerController script and added it as component to Player object.
	h. With this setup we can 
		i.   Click Player in Hierarchy and create new animations in animations window.
		ii.  Click Controller in project folder and observe animations created and configure transitions in 'Animator' window.
		iii. Use PlayerController script to access "animator" and add logic to modify stuff using user-input.
3. Player interaction with world.
	a. Added "rigid body" and "colider" to Player. 
	b. Added a game object and added "ground/tile" sprite to it in sprite-renderer component.
	c. The player now lands on this ground, and we can also play animations based on user input.
4. Player Movement
	a. For Horizontal input - By changing the transform.position of the player. Do this by using direction & speed variables. ALso playing run animation.
	b. For Vertical input   - By applying the force on the rigibody along Y-axis and also playing Jump animation.
5. Accessing Components of a gameObject in script (ex: Player)
	a. When the component is part of the Object in Inspector (Ex: SpriteRenderer, RigidBody2D etc)
		i.  In the class, define private variable (private RigidBody2D rb;)
		ii. In start or awake, get the relevant component into rb (rb = GetComponent<Rigidbody2D>)
		iii. In update or other functions, set/modify values for this component based on logic (rb.velocity = new Vector2(rb.velocity.x, jumpForce);)
	b. When the component is not part of the Object in Hierarchy (Ex: Animator).
		i. In Inspector, we do have a component called "Animator", so we create it in Player.
		ii. However, the animations (clips and relationshipbetween them) are stored in "Player controller" in a file in Project folder.
		iii. We associate this "Player Controller" with "Animator" component in Inspector by dragging/dropping it in the Inspector.
		iv. Here on, we can follow the same approach as in point "a".
6. Make code readable.
	0. Make speed a public variable (to test in inspector). And define "direction" in Update() method (based on user input keys).
	a. Move the animation logic into PlayerAnimation() method and call this in Update().
	b. Move the movement logic into PlayerMovement() method and call this in Update().
7. Creating the world using Tilemaps
	a. Tilemaps are Unity's way of easily creating the world. First, the entire scene is divided into a grid (when you add create->2D->tilemap in hierarchy). 
		i. Call it GroundTiles. Now whatever you will paint on the grid, that's part of this one TileMap object called "GroundTiles". 
		ii. If you delete it, all the "ground" that is part of this object, gets deleted.
	b. Now, Window-->2D-->Tile Pallette. Create new-->Save it as say "Ground Pallette". Bring 2-3 source images. Use these to paint ground for level 1.
	c. Now, in the Tile Pallette, you will have some finite images that you want to paint in the grid (like applying format-painter in slides).
	d. So basically, We paint the "TileMap Grid" in the scene using "Tile Palette".
	e. At this point, "Grond Tile" is not a static rigid body so player will fall through. Add Tilemap Collider 2D, and now it works.
	f. "isgrounded" flag in jump works with the platform tagged as "Ground". So add that tag to Tilemap also.
	g. Add another Tilemap for BackgroundRocks. Add rocks in grid. Play with alpha scale to make it semi transparent so it appears as background thing.
8. Moving camera with player
	a. Either do via script or make camera a child object of Player in hierarchy (as transform of child object move relative to the parent).
	b. Set the transform values of camera once to decide (ex: 70% of space above the player will be visible and 30% below like a normal platformer).
9. Adding LevelComplete & LevelReload logics
	0. To be used when player reaches the end of level, or, dies in between respectively.
	a. Added a game object and made it a trigger in collider2D, and added a script to it to load next level when player touches it.	
	b. Added a game object and made it a trigger in collider2D, and added a script to it to load current level (when player falls through cracks and touches it / dies).
10. Adding interactable object (such as coins or keys)
	a. Add a game object, add image in sprite renderer. Add collider2D.
	b. Add a KeyController Script. Add logic to detect collision with only player (using getComponent<PlayerController>) in OnColliderEnter2D.
	c. On Collision, call PickUpKey() in PlayerController script. And destroy the key. Later, we will add logic to add points in PlayerController when key is picked up.
11. Adding score on UI for keys collected
	a. Add TextMesh object called "Score" in UI. Align and make default text as "Score: 0"
	b. Add ScoreController script. Add logic in it to increment a private "score" variable in a method.
	c. Access component TextMeshPro inside this (i.e. Score object). Add RefreshUI method to update the text to "Score: "+score.
	d. In PlayerController, when PickUpKey is called, also call this increaseScore method inside ScoreController.
12. Adding Enemy
	a. Behavior expected - Player dies when touches enemy. Camera is child of Player, but we don't want Camera to destroy. Level reloads.
	b. Add game object enemy. Add one of enemy sprite. Add animation for that enemy.
	c. Add enemycontroller script. Similar to KeyController condition, but ememy is not destroyed, instead player.killplayer is called.



